<h1>Actividad Integradora 3.4 Resaltador de sintaxis (evidencia de competencia)</h1>
<h3>Salvador Salgado Normandia <br>
Luis Javier Karam Galland</h3>

<br>

**Funcion Principal**: Syntax.json_to_html(in_filename, out_filename)
Complejidad: O(n(x)) Esto es ya que se pasa un file en donde se leen las lineas "n" y despues los elementos de cada linea (x).

<h2><b>Descripción Actividad</h3>

Para esta actividad integradora se nos dio la tarea de leer un archivo con un lenguaje de programación (JSON), el cual debiamos de ir leyendo línea por línea, identifando los distinos tokens e ir creando un archivo html que mostraria la información del archivo json. Antes de poder dar inicio al diseño del programa fue necesario definir las expresiones regulares para cada token que se estaran encontrando en la lectura del archivo.

**REGEX for KEYS**:(?=^)\t* *"[\w0-9:-]+" *(?=:)

**REGEX for VALUES** (String):(?!.*:)(?=^) *"[\(\)\;a-zA-z0-9.&': ?@+!=\/.\*,-]*"| *"[\(\)\;a-zA-z0-9.&': ?@+!=\/.\*,-]*"(?=[,}\]]+)|""

**REGEX for punctuation**:(?=^) *[{},:\[\]]+

**REGEX for reserved words**:(?!.*\d)(?=^)(?=(?:[^"]*"[^"]*")*[^"]*\Z) *[a-zA-Z]+

**REGEX for numbers**:(?=(?:[^"]*"[^"]*")*[^"]*\Z)(?=^) *[\d+E.-]

Estas expersiones regualres no sólo nos permiten identifcar cada token, sino que tambien nos permiten identificar aqeullos tokens que deben de estar al principio de la linea. Esto es impoartante ya que sin esta restricción el programa generaria el html en un orden incorrecto.

Una vez que se identificaron las expresiones regulares para cada posible token dentro del lenuaje de json fue necesario comenzar con el programa. Dentro del módulo Syntax se estableció la función json_to_html(in_filename,out_filename), el cual recibe el archivo json que se va a leer al igual que el nombre del archivo que se va a crear. Es importante mencionar que para el caso out_filename debe de ser archivo .html, ya que de esta forma podrá usar el archivo css que le otorga un estilo visual.

Dentro de esta función se declara una variable d que contiene el día actual en que se genera el código (uso de función Date.utc_today()). El siguiente paso consiste en hacer una copia del template_1.html en donde iremos agregando el html según los tokens encontrados. Una vez creado esta copia se le inserta el valor de "d" remplazando #datetime. Finalmente se crea una copia de la segunda parte del html template que cerrará el archivo final.

El siguiente paso consitió en definir la variable tokens dentro del cual se ira obteniendo los strings HTML de cada token línea por línea. Para esto se utiliza File.stream!() para generar la lista de renglones del archivo para despúes utilizar Enum.map() que recibe nuestra función token para aplicarlos en cada renglón. Una vez que se ha ejectuado el programa juntamos todos los strings html con Enum.join("\n").

El úlitmo paso consiste en juntar tantos los template con la variable tokens para despúes insertarlos en el archivo out_filename.

**Función token**

Esta función recibe como parámetro una línea de texto la cual remplaza los los saltos de línea con "". Una vez hecho esta modificación se agrega un nuevo parametro result, el cual almacenará los string html que se irán generando por cada token dentro de line. Al momento que se identifique el token al inicio de la linea se llama a otra función js_html() que genera el html adecuado para el tipo de token. Finalemnte inserta este nuevo string a la variable results al mismo tiempo que borra ese token de la línea para inspeccionar el siguiente token.

<h2><b>Iniciar el programa</h2>
Para poder ejecutar el programa es necesario encontrarse en la carpeta Actvidad_Integradora_3.4 y ejecutar iex.bat act_3_3.exs.

Una vez iniciado elixir se debe de especificar el nombre del defmodule seguido del la función json_to_html(), cuyos parametros consisten del archivo json donde se leerá la info el nombre del archivo que se va a crear. Una vez que el programa haya finalizado se generará un nuevo archivo html en la misma direcciond del exs.

**Ejecutar en terminal**

![Ejecutar en terminal](/Tareas/Actividad_Integradora_3.4/Images/Terminal.jpg)

**Archivo html**

![Ejecutar en terminal](/Tareas/Actividad_Integradora_3.4/Images/html.jpg)

![Ejecutar en terminal](/Tareas/Actividad_Integradora_3.4/Images/result.jpg)

<br>
<h1>Extension -> Actividad Integradora 5.3 Resaltador de sintaxis paralelo</h1> 
<br>



<p>Una vez que se logro diseñar el programa resaltador de sintaxis de la Actividad 3.4 se nos dio a la tarea de modificarlo de tal manera que pudiese leer varios archivos .json de manera secuencial al igual que de manera paralela.

Al mismo tiempo se espera que obtengamos los tiempos de ejecución de ambos casos para poder identificar aquel con mayor eficiencia.</p>

<h2>Resultados en los tiempos de ejecucion</h2>
<p>Una vez, que medimos el tiempo de ejecucion de las dos versiones de nuestro programa, nos quedamos con las siguientes mediciones:
- Funcion secuencial: 2.518 segundos
- Funcion paralela: .0096 segundos
Aunque los resultados varian dependiendo la velocidad de la maquina que se este usando, en todas se pudo ver un aumento muy considerable en la velocidad de ejecucion, en este caso se observo una aceleracion del 26229%, lo cual es extremadamente optimo en el caso de este programa.
En este caso se puede apreciar la utilidad de lanzar varios threads para resolver un problema, en nuestro caso, fue relativamente simple implementar la funcionalidad paralela en nuestro programa ya que el procesamiento de los files no dependian entre si, esto significa que independientemente del tamaño o tiempo de ejecucion necesario para un solo file no dependeria de su terminacion antes de empezar a procesar el siguiente, abriendo la oportunidad a usar la funcion Task.start de elixir que lanza un thread para procesar cada archivo.
</p>

<h2></h2>
